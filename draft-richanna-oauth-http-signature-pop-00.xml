<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-richanna-oauth-http-signature-pop-00"
     ipr="trust200902">
  <front>
    <title abbrev="OAuth PoP Using HTTP Signatures">Proof-of-Possession Tokens for OAuth Using JWS HTTP Signatures</title>

    <author fullname="Annabelle Backman" initials="A." role="editor"
            surname="Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date day="19" month="November" year="2019"/>

    <!--
    <area>Security</area>

    <workgroup>OAuth Working Group</workgroup>
    -->

    <abstract>
        <t>This document describes a method of generating and validating proof-of-possession
            tokens for use with OAuth 2.0. The required proof is provided via a JSON Web Signature
            (JWS) representing a signature of a minimal subset of elements from the HTTP request.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>In order to prove possession of an access token and its associated
      key, an OAuth 2.0 client needs to compute some cryptographic function
      and present the results to the protected resource as a signature. The
      protected resource then needs to verify the signature and compare that
      to the expected keys associated with the access token. This is in
      addition to the normal token protections provided by a <xref
      target="RFC6750">bearer token</xref> and transport layer security
      (TLS).</t>

      <t>Furthermore, it is desirable to bind the signature to the HTTP
      request. Ideally, this should be done without replicating the
      information already present in the HTTP request more than required.
      However, many HTTP application frameworks insert extra headers, query
      parameters, and otherwise manipulate the HTTP request on its way from
      the web server into the application code itself. It is the goal of this
      draft to have a signature protection mechanism that is sufficiently
      robust against such deployment constraints while still providing
      sufficient security benefits.</t>

      <t>The key required for this signature calculation is distributed via
      mechanisms described in companion documents (see <xref
      target="I-D.ietf-oauth-pop-key-distribution"/> and <xref
      target="I-D.ietf-oauth-pop-architecture"/>). The JSON Web Signature
      (JWS) specification <xref target="RFC7515"/> is used for computing a
      digital signature (which uses asymmetric cryptography) or a keyed
      message digest (in case of symmetric cryptography).</t>

      <t>The mechanism described in this document assumes that a client is in
      possession of an access token and asociated key. That client then
      creates a signature of elements of the HTTP request as a JWS, as described in
      [[ draft-richanna-http-request-signing-jws-00 ]], including the access token as
      an additional top-level member of the signature's payload JSON object, and issues
      a request to a resource server for access to a protected resource using the
      signature as its authorization. The protected resource validates the signature
      and parses the JSON object to obtain token information.</t>
    </section>

    <section title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>

      <t>Other terms such as "client", "authorization server", "access token",
      and "protected resource" are inherited from <xref target="RFC6749">OAuth
      2.0</xref>.</t>

      <t>We use the term 'sign' (or 'signature') to denote both a keyed
      message digest and a digital signature operation.</t>
    </section>

    <section title="Generating the Signature">
        <t>This client creates a JSON Web Signature (JWS) over elements of the HTTP
            request, as described in [[ draft-richanna-http-jwt-signature-00 ]]. The
            client includes the following additional top-level members within the JSON
            object payload of the JWS:</t>

      <t><list style="hanging">
          <t hangText="at">REQUIRED. The access token value. This string is
          assumed to have no particular format or structure and remains opaque
          to the client.</t>
      </list></t>

      <t>The JWS is signed using the algorithm appropriate to the
      associated access token key, usually communicated as part of <xref
      target="I-D.ietf-oauth-pop-key-distribution">key
      distribution</xref>.</t>

    </section>

    <section title="Sending the signed object">
      <t>In order to send the signed object to the protected resource, the
      client includes it in one of the following three places.</t>

      <section title="HTTP Authorization header">
        <t>The client SHOULD send the signed object to the protected resource
            in the <spanx style="code">Authorization</spanx> header. The value
            of the signed object in JWS compact form is appended to the
            <spanx style="code">Authorization</spanx> header as a PoP value.
        This is the preferred method. Note that if this method is used, the
        <spanx style="code">Authorization</spanx> header MUST NOT be included
        in the protected elements of the signed object.</t>

        <figure>
          <artwork><![CDATA[GET /resource/foo
Authorization: PoP eyJ....omitted for brevity...]]></artwork>
        </figure>
      </section>

      <section title="HTTP Form body">
        <t>If the client is sending the request as a form-encoded HTTP message
        with parameters in the body, the client MAY send the signed object as
        part of that form body. The value of the signed object in JWS compact
        form is sent as the form parameter <spanx style="code">pop_access_token</spanx>.
        Note that if this method is used, the body hash cannot be included in the
        protected elements of the signed object.</t>

        <figure>
          <artwork><![CDATA[POST /resource
Content-type: application/www-form-encoded

pop_access_token=eyJ....omitted for brevity...]]></artwork>
        </figure>
      </section>

      <section title="HTTP Query parameter">
        <t>If neither the <spanx style="code">Authorization</spanx> header nor the form-encoded body
        parameter are available to the client, the client MAY send the signed
        object as a query parameter. The value of the signed object in JWS
        compact form is sent as the query parameter <spanx style="code">pop_access_token</spanx>. Note
        that if this method is used, the <spanx style="code">pop_access_token</spanx> parameter MUST NOT
        be included in the protected elements of the signed object.</t>

        <figure>
          <artwork><![CDATA[GET /resource?pop_access_token=eyJ....]]></artwork>
        </figure>
      </section>
    </section>

    <section title="Validating the request">
      <t>Just like with a <xref target="RFC6750">bearer token</xref>, while
      the access token value included in the signed object is opaque to the
      client, it MUST be understood by the protected resource in order to
      fulfill the request. Also like a bearer token, the protected resource
      traditionally has several methods at its disposal for understanding the
      access token. It can look up the token locally (such as in a database),
      it can parse a structured token (such as <xref
      target="RFC7519">JWT</xref>), or it can use a service to look up token
      information (such as <xref target="RFC7662">introspection</xref>).
      Whatever method is used to look up token information, the protected
      resource MUST have access to the key associated with the access token,
      as this key is required to validate the signature of the incoming
      request. Validation of the signature is done according the rules defined
      in [[ draft-richanna-http-jwt-signature-00 ]].</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <section title="The 'pop' OAuth Access Token Type">
        <t>Section 11.1 of <xref target="RFC6749"/> defines the OAuth Access
        Token Type Registry and this document adds another token type to this
        registry.</t>

        <t><list style="hanging">
            <t hangText="Type name:">pop</t>

            <t
            hangText="Additional Token Endpoint Response Parameters:">(none)</t>

            <t hangText="HTTP Authentication Scheme(s):">Proof-of-possession
            access token for use with OAuth 2.0</t>

            <t hangText="Change controller:">IETF</t>

            <t hangText="Specification document(s):">[[ this document ]]</t>
          </list></t>
      </section>
    </section>

    <section anchor="Security" title="Security Considerations">
      <section title="Denial of Service">
        <t>This specification includes a number of features which may make
        resource exhaustion attacks against resource servers possible. For
        example, a resource server may need to process the incoming request,
        verify the access token, perform signature verification, and might (in
        certain circumstances) have to consult back-end databases or the
        authorization server before granting access to the protected resource.
        Many of these actions are shared with bearer tokens, but the
        additional cryptographic overhead of validating the signed request
        needs to be taken into consideration with deployment of this
        specification.</t>

        <t>An attacker may exploit this to perform a denial of service attack
        by sending a large number of invalid requests to the server. The
        computational overhead of verifying the keyed message digest alone is
        not likely sufficient to mount a denial of service attack. To help
        combat this, it is RECOMMENDED that the protected resource validate
        the access token (contained in the <spanx style="verb">at</spanx>
        member of the signed structure) before performing any cryptographic
        verification calculations.</t>
      </section>
    </section>

    <section title="Privacy Considerations">
      <t>This specification addresses machine to machine communications and
      raises no privacy considerations beyond existing OAuth transactions.</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The authors thank the OAuth Working Group for input into this
      work.</t>

      <t>In particular, the authors thank Justin Richer for his work on <xref target="I-D.ietf-oauth-signed-http-request"/>, on which this specification is based.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include="reference.RFC.7519"?>

      <?rfc include="reference.RFC.7515"?>

      <?rfc include="reference.RFC.7662"?>

      <?rfc include="reference.RFC.6750"?>

      <?rfc include="reference.RFC.6749"?>

      <?rfc include="reference.I-D.ietf-oauth-pop-key-distribution"?>

      <?rfc include="reference.I-D.ietf-oauth-pop-architecture"?>

      <?rfc include="reference.I-D.ietf-oauth-signed-http-request.xml"?>
    </references>
  </back>
</rfc>
