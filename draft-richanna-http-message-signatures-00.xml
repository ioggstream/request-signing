<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?xml-stylesheet type="text/xsl" href="rfc2629.xsl" ?>
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocindent="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<!--
    Note for draft editors and processors â€“ you may see the following warning
    when processing this document through xml2rfc:

        Warning: Setting consensus="true" for IETF STD document (this is not
        the schema default, but is the only value permitted for this type of
        document)

    This appears to be an issue be an issue with a lack of distinction between
    drafts and RFCs. The guidance is to ignore the warning for now.

    See: https://www.rfc-editor.org/materials/FAQ-xml2rfcv3.html#name-how-do-i-fix-common-errors-
 -->
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" category="std" ipr="trust200902" docName="draft-richanna-http-message-signatures-00" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="3" symRefs="true" sortRefs="true" version="3">
    <!-- xml2rfc v2v3 conversion 2.35.0 -->
    <front>
        <title>Signing HTTP Messages</title>
        <seriesInfo name="Internet-Draft" value="draft-richanna-http-message-signatures-00"/>
        <author initials="A." surname="Backman" fullname="Annabelle Backman" role="editor">
            <organization>Amazon</organization>
            <address>
                <postal>
                    <street>P.O. Box 81226</street>
                    <city>Seattle</city>
                    <region>WA</region>
                    <code>98108-1226</code>
                    <country>United States of America</country>
                </postal>
                <email>richanna@amazon.com</email>
                <uri>https://www.amazon.com/</uri>
            </address>
        </author>
        <author initials="J." surname="Richer" fullname="Justin Richer">
            <address>
                <email>ietf@justin.richer.org</email>
            </address>
        </author>
        <author initials="M." surname="Sporny" fullname="Manu Sporny">
            <organization>Digital Bazaar</organization>
            <address>
                <postal>
                    <street>203 Roanoke Street W.</street>
                    <city>Blacksburg</city>
                    <region>VA</region>
                    <code>24060</code>
                    <country>United States of America</country>
                </postal>
                <phone>+1 540 961 4469</phone>
                <email>msporny@digitalbazaar.com</email>
                <uri>https://manu.sporny.org/</uri>
            </address>
        </author>
        <date day="04" month="12" year="2019"/>
        <area>Applications</area>
        <workgroup>HTTPbis Working Group</workgroup>
        <keyword>HTTP</keyword>
        <keyword>digital signature</keyword>
        <keyword>PKI</keyword>
        <abstract>
            <t>This document describes a mechanism for creating, encoding, and verifying digital signatures or message authentication codes over subsets of elements within HTTP messages.  This mechanism supports use cases where the full HTTP message may not be known to the signer, and where the message may be transformed (e.g., by intermediaries) before reaching the verifier.</t>
        </abstract>
    </front>
    <middle>
        <section anchor="intro">
            <name>Introduction</name>
            <t>This document describes a mechanism for creating, encoding, and verifying digital signatures or message authentication codes (MACs) over subsets of elements within <xref target="RFC7230">HTTP messages</xref>.  HTTP presents particular challenges for digital signatures and MACs, both due to its design and popular usage patterns.  The generic mechanism presented in this document overcomes these challenges, allowing applications built on HTTP to create signatures over those elements of HTTP messages that are relevant to the application, such that changes to other elements of the message do not prevent verification of the signature.</t>
            
            <t>The mechanism described in this document consists of four parts:</t>
            <ul>
                <li>Rules for creating canonical representations of message elements for the purpose of signing</li>
                <li>Rules for signing a set of these canonical representations</li>
                <li>A mechanism for attaching a signature and related metadata to an HTTP message</li>
                <li>Instructions on how to verify an HTTP message signature</li>
            </ul>

            <section anchor="about_sigs">
                <name>Signing Challenges for HTTP</name>
                <t>Digital signatures and MACs are cryptographic tools that can be used to provide various security properties, such as message integrity or sender authentication.  While several digital signature and MAC algorithms exist, they generally share the constraint that any party wishing to verify a signature must be able to reconstruct the exact byte sequence of the message that was signed.  In cases where the signed message and signature are both sent to the verifier (such as with <xref target="RFC7515">JSON Web Signatures (JWS)</xref>), reconstruction is trivial.  Unfortunately, HTTP explicitly permits transformations that mean we cannot assume that a recipient of a message receives the exact byte sequence that was transmitted by the original sender. For example, the following types of transformations are allowed by HTTP:</t>
                <ul>
                    <li>Re-ordering of header fields, provided the order of header fields with the same field name is preserved <relref target="RFC7230" section="3.2.2" displayFormat="parens"/></li>
                    <li>Combination of header fields with the same field name <relref target="RFC7230" section="3.2.2" displayFormat="parens"/></li>
                    <li>Removal of header fields listed in the <tt>Connection</tt> header field <relref target="RFC7230" section="6.1" displayFormat="parens"/></li>
                    <li>Addition of header fields that indicate control options <relref target="RFC7230" section="6.1" displayFormat="parens"/></li>
                    <li>Addition or removal of a transfer coding <relref target="RFC7230" section="5.7.2" displayFormat="parens"/></li>
                    <li>Addition of header fields such as <tt>Via</tt> (<relref target="RFC7230" section="5.7.1" displayFormat="comma"/>) and <tt>Forwarded</tt> (<relref target="RFC7239" section="4" displayFormat="comma"/>)</li>
                </ul>
                
                <t>Additionally, environments or software libraries may abstract away some of the details of HTTP, such that an application using the library may not be able to perfectly reconstruct the message.  For example:</t>
                <ul>
                    <li>An application may use an HTTP library that provides abstract object representations of HTTP messages, such as <eref target="https://openjdk.java.net/groups/net/httpclient/intro.html">the Java HTTP Client</eref>.</li>
                    <li>A JavaScript application making a cross-origin request using the <eref target="https://fetch.spec.whatwg.org/">Fetch API</eref> may not have full control or view of the header fields in the actual HTTP request transmitted by the user agent.</li>
                </ul>
            </section>

            <section>
                <name>Innocuous Transformations</name>
                <t>The mechanism described in this document is designed to tolerate "innocuous" transformations by allowing the signer to specify precisely which elements in the message are to be protected, and ensuring that transformations that do not alter the value of protected elements do not prevent signature verification. Specifically, the following list describes transformations that are considered innocuous:</t>
                <ul>
                    <li>Addition or removal of a non-protected header field.</li>
                    <li>Consolidation of header fields with the same field name.</li>
                    <li>Reordering of header fields with different names.</li>
                    <li>Conversion between HTTP/1.x and HTTP/2, or vice-versa.</li>
                    <li>Changes in casing (e.g., "Origin" to "origin") of header field names, request URI scheme or host, or any other case-insensitive element.</li>
                    <li>Changes to the value of a non-protected element.</li>
                </ul>
            </section>

            <section anchor="bcp14-terms">
                <name>Conventions and Terminology</name>
                <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119">BCP14</xref> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as shown here.</t>
            </section>
        </section>

        <section anchor="definitions">
            <name>Definitions</name>
            <t>The terms "HTTP message", "HTTP request", "HTTP response", "header field", "sender", and "recipient" take their meaning from <xref target="RFC7230">HTTP</xref>.</t>

            <t>For brevity, the term "signature" on its own is used in this document to refer to both digital signatures and keyed MACs. Similarly, the verb "sign" refers to the generation of either a digital signature or keyed MAC over a given input string. The qualified term "digital signature" refers specifically to the output of an asymmetric cryptographic signing operation.</t>

            <t keepWithNext="true">In addition to those listed above, this document uses the following terms:</t>
            <dl newline="true">
                <dt>Signer</dt><dd>The entity that is generating or has generated an HTTP Message Signature.</dd>
                <dt>Signing Algorithm</dt><dd><cref source="AB">TODO</cref></dd>
                <dt>Signing String</dt><dd><cref source="AB">TODO</cref></dd>
                <dt>Verifier</dt><dd>An entity that is verifying or has verified an HTTP Message Signature against an HTTP Message.  Note that an HTTP Message Signature may be verified by multiple entities, and thus have multiple verifiers.</dd>
            </dl>
        </section>

        <section anchor="message-signatures">
            <name>HTTP Message Signatures</name>
            <t>An HTTP Message Signature represents a signature over a subset of protocol elements within an HTTP message.  It consists of a set of Signature Parameters containing the signature itself along with metadata describing how the signature was generated and which protocol elements are covered by it.</t>

            <section anchor="params">
                <name>Signature Parameters</name>
                <t>The following section details the Signature Parameters.</t>

                <dl newline="true">
                    <dt anchor="algorithm"><tt>algorithm</tt></dt>
                    <dd>
                        <t><bcp14>RECOMMENDED</bcp14>.  The <tt>algorithm</tt> parameter is used to specify the signature string construction mechanism.  Valid values for this parameter can be found in the <xref target="hsa-registry" format="title"/> (<xref target="hsa-registry"/>) and <bcp14>MUST NOT</bcp14> be marked "deprecated".  Implementers <bcp14>SHOULD</bcp14> derive the digital signature algorithm used by an implementation from the key metadata identified by the <tt>keyId</tt> rather than from this field.  If <tt>algorithm</tt> is provided and differs from the key metadata identified by the <tt>keyId</tt>, for example <tt>rsa-sha256</tt> but an EdDSA key is identified via <tt>keyId</tt>, then an implementation <bcp14>MUST</bcp14> produce an error.  Implementers should note that previous versions of the <tt>algorithm</tt> parameter did not use the key information to derive the digital signature type and thus could be utilized by attackers to expose security vulnerabilities.</t>
                        <t><cref source="AB">These instructions are confusing.  Punting algorithm identification into <tt>keyId</tt> hurts interoperability, since we aren't defining the syntax or semantics of <tt>keyId</tt>.  It also goes against the statement that we <em>aren't</em> defining <tt>keyId</tt>'s semantics, as we are dictating that the signing algorithm must be specified by <tt>keyId</tt> or derivable from it.</cref></t>
                    </dd>

                    <dt anchor="created"><tt>created</tt></dt>
                    <dd>
                        <t><bcp14>RECOMMENDED</bcp14>.  The <tt>created</tt> field expresses when the signature was created.  The value <bcp14>MUST</bcp14> be an integer representing the number of seconds since the Epoch, as defined in <eref target="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16">Section 4.16</eref> of <xref target="POSIX.1"/>.  A signature with a <tt>created</tt> timestamp value that is in the future <bcp14>MUST NOT</bcp14> be processed.  Using a Unix timestamp simplifies processing and avoids timezone management required by specifications such as <xref target="RFC3339"/>.  Sub-second precision is not supported.  This value is useful when signers are not capable of controlling the <tt>Date</tt> HTTP Header such as when operating in certain web browser environments.</t>
                        <t><cref source="AB">This wording implies that verifiers are not permitted to account for clock skew during signature verification.</cref></t>
                    </dd>

                    <dt anchor="expires"><tt>expires</tt></dt>
                    <dd>
                        <t><bcp14>OPTIONAL</bcp14>.  The <tt>expires</tt> field expresses when the signature ceases to be valid.  The value <bcp14>MUST</bcp14> be a decimal representing the number of seconds since the Epoch, as defined in <eref target="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16">Section 4.16</eref> of <xref target="POSIX.1"/>.  A signature with an <tt>expires</tt> timestamp value that is in the past <bcp14>MUST NOT</bcp14> be processed.  Using a Unix timestamp simplifies processing and avoid timezone management existing in <xref target="RFC3339"/>.  Sub-second precision is allowed using decimal notation.</t>
                        <t><cref source="AB">This wording implies that verifiers are not permitted to account for clock skew during signature verification.</cref></t>
                    </dd>

                    <dt anchor="headers"><tt>headers</tt></dt>
                    <dd>
                        <t><bcp14>OPTIONAL</bcp14>.  The <tt>headers</tt> parameter is used to specify the list of HTTP headers included when generating the signature for the message.  If specified, it <bcp14>SHOULD</bcp14> be a lowercased, quoted list of HTTP header fields, separated by a single space character.  If not specified, implementations <bcp14>MUST</bcp14> operate as if the field were specified with a single value, <tt>(created)</tt>, in the list of HTTP headers.  Note:
                        </t>
                        <ol>
                            <li>The list order is important, and <bcp14>MUST</bcp14> be specified in the order the HTTP header field-value pairs are concatenated together during <xref target="canonicalization" format="title"/> (<xref target="canonicalization"/>) used during signing and verifying.</li>
                            <li>A zero-length <tt>headers</tt> parameter value <bcp14>MUST NOT</bcp14> be used, since it results in a signature of an empty string.</li>
                        </ol>
                        <t><cref source="AB">The name <tt>headers</tt> is misleading, as this parameter will contain entries that are not HTTP header field names (e.g., <tt>(created)</tt>).</cref></t>
                        <t><cref source="AB">This needs to be expanded to allow for more fine-grained inclusion of message elements (e.g., method, scheme, authority, path, query string parameters).</cref></t>
                    </dd>

                    <dt anchor="keyId"><tt>keyId</tt></dt>
                    <dd>
                        <t><bcp14>REQUIRED</bcp14>.  The <tt>keyId</tt> field is an opaque string that the verifier can use to look up the component they need to verify the signature.  It could be an SSH key fingerprint, a URL to machine-readable key data, an LDAP DN, etc.  Management of keys and assignment of <tt>keyId</tt> is out of scope for this document.  Implementations <bcp14>MUST</bcp14> be able to discover metadata about the key from the <tt>keyId</tt> such that they can determine the type of digital signature algorithm to employ when creating or verifying signatures.</t>
                        <t><cref source="AB">While we need to allow for flexibility in key specification, leaving it completely undefined hurts interoperability.  We could borrow from JOSE and define <tt>jwk</tt> and <tt>jku</tt> parameters as extensible ways to specify common types of keys.</cref></t>
                    </dd>

                    <dt anchor="signature"><tt>signature</tt></dt>
                    <dd>
                        <t><bcp14>REQUIRED</bcp14>.  The <tt>signature</tt> parameter is a base 64 encoded digital signature, as described in <xref target="RFC4648" section="4" sectionFormat="comma">RFC 4648</xref>.  The signer uses the <tt>algorithm</tt> and <tt>headers</tt> Signature Parameters to form a canonicalized <tt>signing string</tt>.  This <tt>signing string</tt> is then signed using the key associated with the <tt>keyId</tt> according to its digital signature algorithm.  The <tt>signature</tt> parameter is then set to the base 64 encoding of the signature.</t>
                    </dd>
                </dl>
            </section>

            <section anchor="canonicalization">
                <name>Signature String Construction</name>
                <t>A signed HTTP message needs to be tolerant of some trivial alterations during transmission as it goes through gateways, proxies, and other entities.  These changes are often of little consequence and very benign, but also often not visible to or detectable by either the sender or the recipient.  Simply signing the entire message that was transmitted by the sender is therefore not feasible: Even very minor changes would result in a signature which cannot be verified.</t>
                <t>This specification allows the signer to select which headers are meaningful by including their names in the <tt>headers</tt> Signature Parameter.  The headers appearing in this parameter are then used to construct the intermediate Signature String, which is the data that is actually signed.</t>
                <t>In order to generate the string that is signed with a key, the signer <bcp14>MUST</bcp14> use the values of each HTTP header field in the <tt>headers</tt> Signature Parameter, in the order they appear in the <tt>headers</tt> Signature Parameter.  It is out of scope for this document to dictate what header fields an application will want to enforce, but implementers <bcp14>SHOULD</bcp14> at minimum include the <tt>(request-target)</tt> and <tt>(created)</tt> header fields if <tt>algorithm</tt> does not start with <tt>rsa</tt>, <tt>hmac</tt>, or <tt>ecdsa</tt>.  Otherwise, <tt>(request-target)</tt> and <tt>date</tt> <bcp14>SHOULD</bcp14> be included in the signature.</t>
                <t>To include the HTTP request target in the signature calculation, use the special <tt>(request-target)</tt> header field name.  To include the signature creation time, use the special <tt>(created)</tt> header field name.  To include the signature expiration time, use the special <tt>(expires)</tt> header field name.
                </t>
                <ol>
                    <li>If the header field name is <tt>(request-target)</tt> then generate the header field value by concatenating the lowercased :method, an ASCII space, and the :path pseudo-headers (as specified in <xref target="RFC7540" section="8.1.2.3" sectionFormat="comma">HTTP/2</xref>).  Note: For the avoidance of doubt, lowercasing only applies to the :method pseudo-header and not to the :path pseudo-header.</li>
                    <li>If the header field name is <tt>(created)</tt> and the <tt>algorithm</tt> parameter starts with <tt>rsa</tt>, <tt>hmac</tt>, or <tt>ecdsa</tt> an implementation <bcp14>MUST</bcp14> produce an error.  If the <tt>created</tt> Signature Parameter is not specified, or is not an integer, an implementation <bcp14>MUST</bcp14> produce an error.  Otherwise, the header field value is the integer expressed by the <tt>created</tt> signature parameter.</li>
                    <li>If the header field name is <tt>(expires)</tt> and the <tt>algorithm</tt> parameter starts with <tt>rsa</tt>, <tt>hmac</tt>, or <tt>ecdsa</tt> an implementation <bcp14>MUST</bcp14> produce an error.  If the <tt>expires</tt> Signature Parameter is not specified, or is not an integer, an implementation <bcp14>MUST</bcp14> produce an error.  Otherwise, the header field value is the integer expressed by the <tt>created</tt> signature parameter.</li>
                    <li>
                        <t>Create the header field string by concatenating the lowercased header field name followed with an ASCII colon <tt>:</tt>, an ASCII space <tt> </tt>, and the header field value.  Leading and trailing optional whitespace (OWS) in the header field value <bcp14>MUST</bcp14> be omitted (as specified in <xref target="RFC7230" section="3.2.4" sectionFormat="comma"/>).
                        </t>
                        <ol>
                            <li>If there are multiple instances of the same header field, all header field values associated with the header field <bcp14>MUST</bcp14> be concatenated, separated by a ASCII comma and an ASCII space <tt>, </tt>, and used in the order in which they will appear in the transmitted HTTP message.</li>
                            <li>If the header value (after removing leading and trailing whitespace) is a zero-length string, the signature string line correlating with that header will simply be the (lowercased) header name, an ASCII colon <tt>:</tt>, and an ASCII space <tt> </tt>.</li>
                            <li>Any other modification to the header field value <bcp14>MUST NOT</bcp14> be made.</li>
                            <li>If a header specified in the headers parameter is malformed or cannot be matched with a provided header in the message, the implementation <bcp14>MUST</bcp14> produce an error.</li>
                        </ol>
                    </li>
                    <li>If value is not the last value then append an ASCII newline <tt>\n</tt>.</li>
                </ol>
                <t keepWithNext="true">To illustrate the rules specified above, assume a <tt>headers</tt> parameter list with the value of <tt>(request-target) (created) host date cache-control x-emptyheader x-example</tt> with the following HTTP request headers:</t>
                <sourcecode><![CDATA[
GET /foo HTTP/1.1
Host: example.org
Date: Tue, 07 Jun 2014 20:51:35 GMT
X-Example: Example header
        with some whitespace.
X-EmptyHeader:
Cache-Control: max-age=60
Cache-Control: must-revalidate]]></sourcecode>
                <t keepWithNext="true">For the HTTP request headers above, the corresponding signature string is:</t>
                <sourcecode><![CDATA[
(request-target): get /foo
(created): 1402170695
host: example.org
date: Tue, 07 Jun 2014 20:51:35 GMT
cache-control: max-age=60, must-revalidate
x-emptyheader:
x-example: Example header with some whitespace.]]></sourcecode>
            </section>

            <section anchor="create">
                <name>Creating a Signature</name>
                <t>In order to create a signature, a signer <bcp14>MUST</bcp14>:
                </t>
                <ol>
                    <li>Use the <tt>headers</tt> and <tt>algorithm</tt> values as well as the contents of the HTTP message, to create the signature string.</li>
                    <li>Use the key associated with <tt>keyId</tt> to generate a digital signature on the signature string.</li>
                    <li>The <tt>signature</tt> is then generated by base 64 encoding the output of the digital signature algorithm.</li>
                </ol>
                <t>For example, assume that the <tt>algorithm</tt> value is "hs2019" and the <tt>keyId</tt> refers to an EdDSA public key.  This would signal to the application that the signature string construction mechanism is the one defined in <xref target="canonicalization"/>: <xref target="canonicalization" format="title"/>, the signature string hashing function is SHA-512, and the signing algorithm is Ed25519 as defined in <xref target="RFC8032" section="5.1" sectionFormat="comma">RFC 8032</xref>: Ed25519ph, Ed25519ctx, and Ed25519.  The result of the signature creation algorithm should result in a binary string, which is then base 64 encoded and placed into the <tt>signature</tt> value.</t>
            </section>

            <section anchor="verify">
                <name>Verifying a Signature</name>
                <t>In order to verify a signature, a verifier <bcp14>MUST</bcp14>:
                </t>
                <ol>
                    <li>Use the received HTTP message, the <tt>headers</tt> value, and the <xref target="canonicalization" format="title"/> (<xref target="canonicalization"/>) algorithm to recreate the signature.</li>
                    <li>The <tt>algorithm</tt>, <tt>keyId</tt>, and base 64 decoded <tt>signature</tt> listed in the Signature Parameters are then used to verify the authenticity of the digital signature.  Note: The application verifying the signature <bcp14>MUST</bcp14> derive the digital signature algorithm from the metadata associated with the <tt>keyId</tt> and <bcp14>MUST NOT</bcp14> use the value of <tt>algorithm</tt> from the signed message.</li>
                </ol>
                <t>If a header specified in the <tt>headers</tt> value of the Signature Parameters (or the default item <tt>(created)</tt> where the <tt>headers</tt> value is not supplied) is absent from the message, the implementation <bcp14>MUST</bcp14> produce an error.</t>
                <t>For example, assume that the <tt>algorithm</tt> value was "hs2019" and and the <tt>keyId</tt> refers to an EdDSA public key.  This would signal to the application that the signature string construction mechanism is the one defined in <xref target="canonicalization"/>: <xref target="canonicalization" format="title"/>, the signature string hashing function is SHA-512, and the signing algorithm is Ed25519 as defined in <xref target="RFC8032" section="5.1" sectionFormat="comma">RFC 8032</xref>: Ed25519ph, Ed25519ctx, and Ed25519.  The result of the signature verification algorithm should result in a successful verification unless the headers protected by the signature were tampered with in transit.</t>
            </section>
        </section>

        <section anchor="sig">
            <name>The 'Signature' HTTP Header</name>
            <t>The "Signature" HTTP Header provides a mechanism to link the headers of a message (client request or server response) to a digital signature.  By including the "Digest" header with a properly formatted digest, the message body can also be linked to the signature.  The signature is generated and verified either using a shared secret (e.g., HMAC) or public/private keys (e.g., RSA, EC).  This allows the receiver and/or any intermediate system to immediately or later verify the integrity of the message.  When the signature is generated with a private key it can also provide a measure of non-repudiation, though a full implementation of a non-repudiatable statement is beyond the scope of this specification and highly dependent on implementation.</t>

            <section anchor="sig-header">
                <name>Signature Header</name>
                <t>The sender is expected to transmit a header (as defined in <xref target="RFC7230" section="3.2" sectionFormat="comma">RFC 7230</xref>) where the "field-name" is "Signature", and the "field-value" contains one or more "auth-param"s (as defined in <xref target="RFC7235" section="4.1" sectionFormat="comma">RFC 7235</xref>) where the "auth-param" parameters meet the requirements listed in Section 2: The Components of a Signature.</t>

                <t>If any of parameters are erroneously duplicated in the Signature header field value, then the the signature <bcp14>MUST NOT</bcp14> be processed.  Any parameter that is not recognized by the verifier or that is not well-formed <bcp14>MUST</bcp14> be ignored.</t>

                <t keepWithNext="true">The rest of this section uses the following HTTP request as an example.</t>
                <sourcecode><![CDATA[
POST /foo HTTP/1.1
Host: example.org
Date: Tue, 07 Jun 2014 20:51:35 GMT
Content-Type: application/json
Digest: SHA-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=
Content-Length: 18

{"hello": "world"}]]></sourcecode>
                <t>The following sections assume that the "rsa-key-1" keyId provided by the signer is an identifier meaningful to the verifier.</t>

                <section anchor="sig-rsa-example">
                    <name>RSA Example</name>
                    <t keepWithNext="true">The signature header and signature would be generated as:</t>
                    <sourcecode><![CDATA[
Signature: keyId="rsa-key-1",algorithm="hs2019",
    created=1402170695, expires=1402170995,
    headers="(request-target) (created) (expires)
        host date digest content-length",
    signature="Base64(RSA-SHA256(signing string))"]]></sourcecode>
                    <t keepWithNext="true">The signer would compose the signing string as:</t>
                    <sourcecode><![CDATA[
(request-target): post /foo\n
(created): 1402170695
(expires): 1402170995
host: example.org\n
digest: SHA-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=\n
content-length: 18]]></sourcecode>
                    <t>Note that the '\n' symbols above are included to demonstrate where the new line character should be inserted.  There is no new line on the final line of the signing string.  Each HTTP header above is displayed on a new line to provide better readability of the example.</t>
                    <t keepWithNext="true">For an RSA-based signature, the authorization header and signature would then be generated as:</t>
                    <sourcecode><![CDATA[
Signature: keyId="rsa-key-1",algorithm="hs2019",created=1402170695,
    headers="(request-target) (created) host digest content-length",
    signature="Base64(RSA-SHA512(signing string))"]]></sourcecode>
                </section>

                <section anchor="sig-hmac-example">
                    <name>HMAC Example</name>
                    <t keepWithNext="true">For an HMAC-based signature without a list of headers specified, the authorization header and signature would be generated as:</t>
                    <sourcecode><![CDATA[
Signature: keyId="hmac-key-1",algorithm="hs2019",created=1402170695,
    headers="(request-target) (created) host digest content-length",
    signature="Base64(HMAC-SHA512(signing string))"]]></sourcecode>
                    <t keepWithNext="true">The only difference between the RSA Example and the HMAC Example is the signature algorithm that is used.  The signer would compose the signing string in the same way as the RSA Example above:</t>
                    <sourcecode><![CDATA[
(request-target): post /foo\n
(created): 1402170695
host: example.org\n
digest: SHA-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=\n
content-length: 18]]></sourcecode>
                </section>
            </section>
        </section>

        <section anchor="iana">
            <name>IANA Considerations</name>
            <section anchor="hsa-registry">
                <name>HTTP Signature Algorithms Registry</name>
                <t><cref source="AB"><xref target="RFC7518">JSON Web Algorithms (JWA)</xref> already defines an IANA registry for cryptographic algorithms.  What is the justification for defining a new one?</cref></t>
                <t>This document defines HTTP Signature Algorithms, for which IANA is asked to create and maintain a new registry titled "HTTP Signature Algorithms".  Initial values for this registry are given in <xref target="iana-hsa-contents"/>.  Future assignments and modifications to existing assignment are to be made through the Expert Review registration policy <xref target="RFC8126"/> and shall follow the template presented in <xref target="iana-hsa-template" />.</t>

                <section anchor="iana-hsa-template">
                    <name>Registration Template</name>
                    <dl newline="true">
                        <dt>Algorithm Name</dt>
                        <dd>An identifier for the HTTP Signature Algorithm.  The name <bcp14>MUST</bcp14> be an ASCII string consisting only of lower-case characters (<tt>"a"</tt> - <tt>"z"</tt>), digits (<tt>"0"</tt> - <tt>"9"</tt>), and hyphens (<tt>"-"</tt>), and <bcp14>SHOULD NOT</bcp14> exceed 20 characters in length.  The identifier <bcp14>MUST</bcp14> be unique within the context of the registry.</dd>
                        <dt>Status</dt>
                        <dd>A brief text description of the status of the algorithm.  The description <bcp14>MUST</bcp14> begin with one of "Active" or "Deprecated", and <bcp14>MAY</bcp14> provide further context or explanation as to the reason for the status.</dd>
                        <dt>Description</dt>
                        <dd>A description of the algorithm used to sign the signing string when generating an HTTP Message Signature, or instructions on how to determine that algorithm. When the description specifies an algorithm, it <bcp14>MUST</bcp14> include a reference to the document or documents that define the algorithm.</dd>
                    </dl>
                </section>

                <section anchor="iana-hsa-contents">
                    <name>Initial Contents</name>
                    <t><cref source="MS">The references in this section are problematic as many of the specifications that they refer to are too implementation specific, rather than just pointing to the proper signature and hashing specifications.  A better approach might be just specifying the signature and hashing function specifications, leaving implementers to connect the dots (which are not that hard to connect).</cref></t>
                    <t><cref source="AB">Initial registry contents should not contain deprecated algorithms.</cref></t>

                    <section numbered="false">
                        <name><tt>hs2019</tt></name>
                        <dl newline="true">
                            <dt>Algorithm Name</dt>
                            <dd><tt>hs2019</tt></dd>
                            <dt>Status</dt>
                            <dd>active</dd>
                            <dt>Description</dt>
                            <dd>
                                <t keepWithNext="true">Derived from metadata associated with <tt>keyId</tt>.  Recommend support for:</t>
                                <ul>
                                    <li>RSASSA-PSS <xref target="RFC8017"/> using SHA-512 <xref target="RFC6234"/></li>
                                    <li>HMAC <xref target="RFC2104"/> using SHA-512 <xref target="RFC6234"/></li>
                                    <li>ECDSA using curve P-256 <xref target="FIPS186-4"/> and SHA-512 <xref target="RFC6234"/></li>
                                    <li>Ed25519ph, Ed25519ctx, and Ed25519 <xref target="RFC8032"/></li>
                                </ul>
                                <t><cref source="AB">Pushing this into <tt>keyId</tt> without guidance on <tt>keyId</tt>'s format hurts interoperability and contradicts the earlier statement that the structure and semantics of <tt>keyId</tt> are out of scope.  These should each be defined as separate algorithms, and the verification steps should require the verifier to confirm that the specified key fits the specified algorithm.</cref></t>
                            </dd>
                        </dl>
                    </section>

                    <section numbered="false">
                        <name><tt>rsa-sha1</tt></name>
                        <dl newline="true">
                            <dt>Algorithm Name</dt>
                            <dd><tt>rsa-sha1</tt></dd>
                            <dt>Status</dt>
                            <dd>
                                <t>Deprecated; SHA-1 not secure.</t>
                                <t><cref source="AB">What does "not secure" mean in this context?  Should this even be defined if there are security concerns?</cref></t>
                            </dd>
                            <dt>Description</dt>
                            <dd>RSASSA-PKCS1-v1_5 <xref target="RFC8017"/> using SHA-1 <xref target="RFC6234"/></dd>
                        </dl>
                    </section>

                    <section numbered="false">
                        <name><tt>rsa-sha256</tt></name>
                        <dl newline="true">
                            <dt>Algorithm Name</dt>
                            <dd><tt>rsa-sha256</tt></dd>
                            <dt>Status</dt>
                            <dd>
                                <t>Deprecated; specifying signature algorithm enables attack vector.</t>
                                <t><cref source="AB">What attack vector?  Can we mitigate it by including <tt>algorithm</tt> in the signing string?</cref></t>
                            </dd>
                            <dt>Description</dt>
                            <dd>RSASSA-PKCS1-v1_5 <xref target="RFC8017"/> using SHA-256 <xref target="RFC6234"/></dd>
                        </dl>
                    </section>

                    <section numbered="false">
                        <name><tt>hmac-sha256</tt></name>
                        <dl newline="true">
                            <dt>Algorithm Name</dt>
                            <dd><tt>hmac-sha256</tt></dd>
                            <dt>Status</dt>
                            <dd>
                                <t>Deprecated; specifying signature algorithm enables attack vector.</t>
                                <t><cref source="AB">What attack vector?  Can we mitigate it by including <tt>algorithm</tt> in the signing string?</cref></t>
                            </dd>
                            <dt>Description</dt>
                            <dd>HMAC <xref target="RFC2104"/> using SHA-256 <xref target="RFC6234"/></dd>
                        </dl>
                    </section>

                    <section numbered="false">
                        <name><tt>ecdsa-sha256</tt></name>
                        <dl newline="true">
                            <dt>Algorithm Name</dt>
                            <dd><tt>ecdsa-sha256</tt></dd>
                            <dt>Status</dt>
                            <dd>
                                <t>Deprecated; specifying signature algorithm enables attack vector.</t>
                                <t><cref source="AB">What attack vector?  Can we mitigate it by including <tt>algorithm</tt> in the signing string?</cref></t>
                            </dd>
                            <dt>Description</dt>
                            <dd>ECDSA using curve P-256 <xref target="FIPS186-4"/> and SHA-256 <xref target="RFC6234"/></dd>
                        </dl>
                    </section>
                </section>
            </section>
        </section>

        <section anchor="security">
            <name>Security Considerations</name>
            <t><cref source="AB">TODO: need to dive deeper on this section; not sure how much of what's referenced below is actually applicable, or if it covers everything we need to worry about.</cref></t>
            <t>There are a number of security considerations to take into account when implementing or utilizing this specification.  A thorough security analysis of this protocol, including its strengths and weaknesses, can be found in <xref target="WP-HTTP-Sig-Audit">Security Considerations for HTTP Signatures</xref>.</t>
        </section>
    </middle>
    <back>
        <displayreference target="FIPS186-4" to="DSS"/>
        <displayreference target="RFC8126" to="BCP 26"/>
        <references>
            <name>References</name>
            <references>
                <name>Normative References</name>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2104.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4648.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7235.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7540.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
                <reference anchor="FIPS186-4" target="https://csrc.nist.gov/publications/detail/fips/186/4/final">
                    <front>
                        <title>Digital Signature Standard (DSS)</title>
                        <author><organization>NIST</organization></author>
                        <date month="07" year="2013"/>
                    </front>
                    <seriesInfo name="FIPS" value="186-4"/>
                    <seriesInfo name="DOI" value="10.6028/NIST.FIPS.186-4"/>
                </reference>
                <reference anchor="POSIX.1" target="https://pubs.opengroup.org/onlinepubs/9699919799/">
                    <front>
                        <title>The Open Group Base Specifications Issue 7, 2018 edition</title>
                        <author><organization>IEEE</organization></author>
                        <author><organization>The Open Group</organization></author>
                        <date year="2018"/>
                    </front>
                    <seriesInfo name="IEEE Std" value="1003.1-2017"/>
                </reference>
            </references>
            <references>
                <name>Informative References</name>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3339.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6234.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7239.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7515.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7518.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8017.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8032.xml"/>
                <reference anchor="WP-HTTP-Sig-Audit" target="https://web-payments.org/specs/source/http-signatures-audit/">
                    <front>
                        <title>Security Considerations for HTTP Signatures</title>
                        <author initials="M." surname="Sporny" fullname="Manu Sporny"/>
                        <date month="June" year="2013"/>
                    </front>
                </reference>
                <reference anchor="WP-HTTP-Sig-Nonces" target="https://web-payments.org/specs/source/http-signature-nonces/">
                    <front>
                        <title>HTTP Signature Nonces</title>
                        <author initials="M." surname="Sporny" fullname="Manu Sporny"/>
                        <date month="July" year="2013"/>
                    </front>
                </reference>
                <reference anchor="WP-HTTP-Sig-Trailers" target="https://web-payments.org/specs/source/http-signature-trailers/">
                    <front>
                        <title>HTTP Signature Trailers</title>
                        <author initials="M." surname="Sporny" fullname="Manu Sporny"/>
                        <date month="July" year="2013"/>
                    </front>
                </reference>
            </references>
        </references>

        <section anchor="appendix-a">
            <name>Extensions</name>
            <t>This specification was designed to be simple, modular, and extensible.  There are a number of other specifications that build on this one.  For example, the <xref target="WP-HTTP-Sig-Nonces">HTTP Signature Nonces</xref> specification details how to use HTTP Signatures over a non-secured channel like HTTP and the <xref target="WP-HTTP-Sig-Trailers">HTTP Signature Trailers</xref> specification explains how to apply HTTP Signatures to streaming content.  Developers that desire more functionality than this specification provides are urged to ensure that an extension specification doesn't already exist before implementing a proprietary extension.</t>
            <t>If extensions to this specification are made by adding new Signature Parameters, those extension parameters <bcp14>MUST</bcp14> be registered in the Signature Authentication Scheme Registry.  The registry will be created and maintained at (the suggested URI) <eref target="https://www.iana.org/assignments/http-auth-scheme-signature"/>.</t>
            <t keepWithNext="true">An example entry in this registry is included below:</t>
            <sourcecode><![CDATA[
Signature Parameter: nonce
Reference to specification: [HTTP_AUTH_SIGNATURE_NONCE], Section XYZ.
Notes (optional): The HTTP Signature Nonces specification details
how to use HTTP Signatures over a unsecured channel like HTTP.]]></sourcecode>
        </section>

        <section anchor="appendix-b">
            <name>Test Values</name>
            <t>WARNING: THESE TEST VECTORS ARE OLD AND POSSIBLY WRONG.  THE NEXT VERSION OF THIS SPECIFICATION WILL CONTAIN THE PROPER TEST VECTORS.</t>
            <t keepWithNext="true">The following test data uses the following RSA 2048-bit keys, which we will refer to as <tt>keyId=Test</tt> in the following samples:</t>
            <sourcecode><![CDATA[
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDCFENGw33yGihy92pDjZQhl0C3
6rPJj+CvfSC8+q28hxA161QFNUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6
Z4UMR7EOcpfdUE9Hf3m/hs+FUR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJw
oYi+1hqp1fIekaxsyQIDAQAB
-----END PUBLIC KEY-----

-----BEGIN RSA PRIVATE KEY-----
MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF
NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F
UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB
AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA
QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK
kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg
f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u
412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc
mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7
kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA
gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW
G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI
7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==
-----END RSA PRIVATE KEY-----]]></sourcecode>
            <t keepWithNext="true">All examples use this request:</t>
            <sourcecode><![CDATA[
POST /foo?param=value&pet=dog HTTP/1.1
Host: example.com
Date: Sun, 05 Jan 2014 21:31:40 GMT
Content-Type: application/json
Digest: SHA-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=
Content-Length: 18

{"hello": "world"}]]></sourcecode>

            <section anchor="default-test">
                <name>Default Test</name>
                <t keepWithNext="true">If a list of headers is not included, the date is the only header that is signed by default for rsa-sha256.  The string to sign would be:</t>
                <sourcecode><![CDATA[
date: Sun, 05 Jan 2014 21:31:40 GMT]]></sourcecode>
                <t keepWithNext="true">The Authorization header would be:</t>
                <sourcecode><![CDATA[
Authorization: Signature keyId="Test",algorithm="rsa-sha256",
signature="SjWJWbWN7i0wzBvtPl8rbASWz5xQW6mcJmn+ibttBqtifLN7Sazz
6m79cNfwwb8DMJ5cou1s7uEGKKCs+FLEEaDV5lp7q25WqS+lavg7T8hc0GppauB
6hbgEKTwblDHYGEtbGmtdHgVCk9SuS13F0hZ8FD0k/5OxEPXe5WozsbM="]]></sourcecode>
                <t keepWithNext="true">The Signature header would be:</t>
                <sourcecode><![CDATA[
Signature: keyId="Test",algorithm="rsa-sha256",
signature="SjWJWbWN7i0wzBvtPl8rbASWz5xQW6mcJmn+ibttBqtifLN7Sazz
6m79cNfwwb8DMJ5cou1s7uEGKKCs+FLEEaDV5lp7q25WqS+lavg7T8hc0GppauB
6hbgEKTwblDHYGEtbGmtdHgVCk9SuS13F0hZ8FD0k/5OxEPXe5WozsbM="]]></sourcecode>
            </section>

            <section anchor="basic-test">
                <name>Basic Test</name>
                <t keepWithNext="true">The minimum recommended data to sign is the (request-target), host, and date.  In this case, the string to sign would be:</t>
                <sourcecode><![CDATA[
(request-target): post /foo?param=value&pet=dog
host: example.com
date: Sun, 05 Jan 2014 21:31:40 GMT]]></sourcecode>
                <t keepWithNext="true">The Authorization header would be:</t>
                <sourcecode><![CDATA[
Authorization: Signature keyId="Test",algorithm="rsa-sha256",
    headers="(request-target) host date",
    signature="qdx+H7PHHDZgy4y/Ahn9Tny9V3GP6YgBPyUXMmoxWtLbHpUnXS
    2mg2+SbrQDMCJypxBLSPQR2aAjn7ndmw2iicw3HMbe8VfEdKFYRqzic+efkb3
    nndiv/x1xSHDJWeSWkx3ButlYSuBskLu6kd9Fswtemr3lgdDEmn04swr2Os0="]]></sourcecode>
            </section>

            <section anchor="all-headers-test">
                <name>All Headers Test</name>
                <t keepWithNext="true">A strong signature including all of the headers and a digest of the body of the HTTP request would result in the following signing string:</t>
                <sourcecode><![CDATA[
(request-target): post /foo?param=value&pet=dog
host: example.com
date: Sun, 05 Jan 2014 21:31:40 GMT
content-type: application/json
digest: SHA-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=
content-length: 18]]></sourcecode>
                <t keepWithNext="true">The Authorization header would be:</t>
                <sourcecode><![CDATA[
Authorization: Signature keyId="Test",algorithm="rsa-sha256",
    created=1402170695, expires=1402170699,
    headers="(request-target) (created) (expires)
        host date content-type digest content-length",
    signature="vSdrb+dS3EceC9bcwHSo4MlyKS59iFIrhgYkz8+oVLEEzmYZZvRs
        8rgOp+63LEM3v+MFHB32NfpB2bEKBIvB1q52LaEUHFv120V01IL+TAD48XaER
        ZFukWgHoBTLMhYS2Gb51gWxpeIq8knRmPnYePbF5MOkR0Zkly4zKH7s1dE="]]></sourcecode>
                <t keepWithNext="true">The Signature header would be:</t>
                <sourcecode><![CDATA[
Signature: keyId="Test",algorithm="rsa-sha256",
    created=1402170695, expires=1402170699,
    headers="(request-target) (created) (expires)
        host date content-type digest content-length",
    signature="vSdrb+dS3EceC9bcwHSo4MlyKS59iFIrhgYkz8+oVLEEzmYZZvRs
        8rgOp+63LEM3v+MFHB32NfpB2bEKBIvB1q52LaEUHFv120V01IL+TAD48XaER
        ZFukWgHoBTLMhYS2Gb51gWxpeIq8knRmPnYePbF5MOkR0Zkly4zKH7s1dE="]]></sourcecode>
            </section>
        </section>

        <section anchor="acknowledgements" numbered="false">
            <name>Acknowledgements</name>
            <t>This specification is based on the draft-cavage-http-signatures draft.  The editor would like to thank the authors of that draft, Mark Cavage and Manu Sporny, for their work on that draft and their continuing contributions.</t>
            <t>The editor would also like to thank the following individuals for feedback on and implementations of the draft-cavage-http-signatures draft (in alphabetical order):
Mark Adamcin,
Mark Allen,
Paul Annesley,
Karl BÃ¶hlmark,
StÃ©phane Bortzmeyer,
Sarven Capadisli,
Liam Dennehy,
ductm54,
Stephen Farrell,
Phillip Hallam-Baker,
Eric Holmes,
Andrey Kislyuk,
Adam Knight,
Dave Lehn,
Dave Longley,
James H. Manger,
Ilari Liusvaara,
Mark Nottingham,
Yoav Nir,
Adrian Palmer,
Lucas Pardue,
Roberto Polli,
Julian Reschke,
Michael Richardson,
Wojciech Rygielski,
Adam Scarr,
Cory J. Slep,
Dirk Stein,
Henry Story,
Lukasz Szewc,
Chris Webber, and
Jeffrey Yasskin
            </t>
        </section>

        <section numbered="false" removeInRFC="true">
            <name>Document History</name>
            <ul>
                <li>
                    <t><strong>draft-richanna-http-message-signatures</strong></t>
                    <ul>
                        <li>
                            <t><strong>-00</strong></t>
                            <ul>
                                <li>Converted to xml2rfc v3 and reformatted to comply with RFC style guides.</li>
                                <li>Rewrote abstract and introduction to focus on general purpose signing and avoid specific use cases.</li>
                                <li>Added intro sections on challenges with HTTP message signing, and listing innocuous transformations that the signing mechanism must tolerate.</li>
                                <li>Added Document History section.</li>
                                <li>Removed informative intro sections on Signatures in HTTP Requests/Responses, as they imply specific use cases.</li>
                                <li>Moved BCP 14 message under intro section.</li>
                                <li>Removed <tt>Signature</tt> auth-scheme definition and non-normative description of using the <tt>Signature</tt> header field for authentication.</li>
                                <li>Removed "Canonicalization Algorithm" from HTTP Signature Algorithms registry entries.</li>
                                <li>Replaced mentions of ANSI X9.64 with normative references to FIPS 186-4.</li>
                                <li>Combined HTTP Signature Algorithms registry entry algorithm fields into a "Description" field.</li>
                                <li>Revised HTTP Signature Algorithms registry definition.  Added change control policy and registry template.  Removed suggested URI.</li>
                                <li>Moved normative text related to ambiguous signature parameters to Signature header definition.</li>
                                <li>Added normative reference to RFC 2104 for HMAC.</li>
                                <li>Added informative reference to RFC 3339.</li>
                                <li>Added normative reference to POSIX.1 in `created` and `expires` parameter definitions.</li>
                                <li>Added definitions for HTTP-related terms by referencing RFC 7230.</li>
                                <li>Added definitions for Signer and Verifier, and placeholder entries for Signing Algorithm and Signing String.</li>
                                <li>Added definition of signature as applying to both digital signatures and MACs.</li>
                                <li>Renamed The Components of a Signature to HTTP Message Signatures. Revised to define message signatures without reference to Authorization or Signature headers.</li>
                            </ul>
                        </li>
                    </ul>
                </li>
            </ul>
        </section>
    </back>
</rfc>
